---
// Check for search parameter and prepare redirect if it exists
const searchParam = Astro.url.searchParams.get('search');
const redirectUrl = searchParam ? `/catalog?q=${encodeURIComponent(searchParam)}&page=1` : null;

import BaseHead from '../components/BaseHead.astro';
import {ConfiguredHeader} from '../components/Header/Header';
import Footer, { ConfiguredFooter } from '../components/Footer/Footer';

import { SITE_TITLE, SITE_DESCRIPTION, BASE_URL } from '../config';
import { HeroIndex, Post } from '../components/HeroIndex/HeroIndex';
import TodaysHours from '../components/TodaysHours/TodaysHours';
import SearchWidget from '../components/SearchWidget/SearchWidget'; // Import the new component

import clsx from 'clsx';
import { LibraryHoursBlock } from '../components/LibraryHoursBlock/LibraryHoursBlock';
import { ReadMoreBlock } from '../components/ReadMoreBlock/ReadMoreBlock';
import dayjs from 'dayjs';
import { GLOBAL_LINKS, SOCIAL_LINKS } from '../constants';

const news: Post[] = (await Astro.glob('./news/**/*.{md,mdx}')).sort(
  (a, b) =>
    new Date(b.frontmatter.publishedAt).valueOf() - new Date(a.frontmatter.publishedAt).valueOf(),
).slice(0, 3).map((post) => ({
  title: post.frontmatter.title,
  url: post.url,
  date: new Date(post.frontmatter.publishedAt).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
  }),
  category: post.frontmatter.category,
  description: post.frontmatter.description,
}));
const services: Post[] = [
  {
    title: 'Library Catalog',
    url: BASE_URL+'catalog',
    date: new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }),
    // category: 'Explore',
    description: 'Search the library catalog for books, movies, and more.',
  },
  {
    title: 'On-site Services',
    url: BASE_URL+'services',
    date: new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }),
    // category: 'On Site',
    description: 'Learn about what our library can do for you.',
  },
  {
    title: 'Upcoming Events',
    url: BASE_URL+'events',
    date: new Date().toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }),
    // category: 'Policies',
    description: 'Come see what\'s happening this month at the library.',
  }];

---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
    <script define:vars={{ baseUrl: BASE_URL }}>
      // This script will run after the page loads
      document.addEventListener('DOMContentLoaded', function() {
        // Find the search input and button in the HeroIndex component
        var searchInput = document.querySelector('.bg-info-dark input');
        var searchButton = document.querySelector('.bg-info-dark button');
        
        if (searchInput && searchButton) {
          // Add click event listener to the search button
          searchButton.addEventListener('click', function() {
            var searchTerm = searchInput.value.trim();
            if (searchTerm) {
              window.location.href = baseUrl + 'catalog?q=' + encodeURIComponent(searchTerm) + '&page=1';
            }
          });
          
          // Add keypress event listener to the search input (for Enter key)
          searchInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
              e.preventDefault(); // Prevent form submission
              var searchTerm = searchInput.value.trim();
              if (searchTerm) {
                window.location.href = baseUrl + 'catalog?q=' + encodeURIComponent(searchTerm) + '&page=1';
              }
            }
          });
        }
      });
    </script>
  </head>
  <body class="dark:bg-slate-900">
    
    <ConfiguredHeader />
    <HeroIndex
      posts={services}>
      <TodaysHours client:only />
    </HeroIndex>
    <main
      class={clsx(
        "grid",
        "mt-8",
        "md:grid-cols-3",
        "grid-cols-1",
        "gap-y-[32px]",
        "gap-x-[32px]",
        "lg:w-4xl",
        "lg:mx-auto",
        "lg:px-0",
        "px-[16px]",
        "w-full"
      )}
    >
      <div class={clsx(
        "md:col-span-2",
        "col-span-1",
        "flex",
        "flex-col",
        "relative",
        "h-auto",
      )}>
        <div class={clsx(
          "w-full",
          "md:order-first",
          "order-last"
        )}>
          <h2 class="text-2xl font-bold mb-4">Latest News</h2>
          {news.length > 0 ? (
            news.map((post) => (
              <ReadMoreBlock
                title={post.title}
                titleSize="xs"
                subtitle={post.description}
                category={post.category}
                url={post.url}
                linkText={
                  `Posted on: ${dayjs(post.date).format('MMMM D, YYYY')}`
                }
              />
            ))
          ) : (
            <p>No news available.</p>
          )}
        </div>
      </div>
      <div
      class={clsx(
        "col-span-1",
        "flex",
        "flex-col",
        "items-start",
        "justify-start",
        "gap-2"
      )}
    >
        

        <LibraryHoursBlock />
      </div>

    </main>
    <ConfiguredFooter />
  </body>
</html>
